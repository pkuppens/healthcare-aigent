---
# This playbook sets up Python virtual environments for the Healthcare AI Agent project.
# It creates separate environments for Python 3.11, 3.12, and 3.13, each with langflow installed.
# The playbook is idempotent - it can be run multiple times safely.
# Note: Run setup_system.yml first to ensure required Python versions and UV are installed.

- name: Setup Python virtual environments
  # hosts: defines which machines to run the playbook on
  # localhost: runs on the current machine
  # For remote machines, you would use:
  # hosts: all  # runs on all machines in inventory
  # or
  # hosts: webservers  # runs on machines in the 'webservers' group
  hosts: localhost

  # connection: defines how to connect to the hosts
  # local: runs commands directly on the local machine
  # For remote machines, you would use:
  # connection: ssh  # connects via SSH
  # or
  # connection: winrm  # connects via Windows Remote Management
  connection: local

  # become: controls privilege escalation
  # false: run commands as the current user
  # true: run commands with sudo/administrator privileges
  # For system-wide installations, you might need:
  # become: true
  become: false

  vars:
    # Get the current working directory
    project_root: "{{ lookup('env', 'PWD') }}"
    # Define Python versions to support
    python_versions:
      - "3.11"
      - "3.12"
      - "3.13"
    # Base directory for virtual environments
    venv_base_dir: "{{ project_root }}/.venvs"
    # Detect if we're in WSL
    is_wsl: "{{ ansible_system == 'Linux' and 'microsoft' in ansible_distribution.lower() }}"

  tasks:
    # Debug task to show current environment state
    - name: Show current environment state
      debug:
        msg: |
          Project root: {{ project_root }}
          Venv dir: {{ venv_base_dir }}
          Current Python: {{ ansible_python_version }}
          Current user: {{ ansible_user_id }}
          System: {{ ansible_system }}
          Distribution: {{ ansible_distribution }}
          Is WSL: {{ is_wsl }}

    # Create base directory for virtual environments if it doesn't exist
    - name: Create virtual environments directory
      file:
        path: "{{ venv_base_dir }}"
        state: directory
        mode: '0755'
      register: venv_dir_creation
      changed_when: venv_dir_creation.changed

    # Create virtual environments for each Python version
    - name: Create virtual environments for each Python version
      command: "python{{ item }}-venv {{ venv_base_dir }}/py{{ item }}"
      loop: "{{ python_versions }}"
      register: venv_creation
      changed_when: venv_creation.rc == 0
      # Skip if virtual environment already exists
      when: not (stat is defined and stat.stat.exists)
      vars:
        stat: "{{ lookup('stat', venv_base_dir + '/py' + item) }}"

    # Debug task to show virtual environment creation status
    - name: Show virtual environment status
      debug:
        msg: |
          Virtual environment py{{ item }}:
          - Path: {{ venv_base_dir }}/py{{ item }}
          - Exists: {{ lookup('stat', venv_base_dir + '/py' + item).stat.exists }}
          - Python version: {{ lookup('pipe', venv_base_dir + '/py' + item + '/bin/python --version') }}
      loop: "{{ python_versions }}"

    # Install langflow in each virtual environment
    - name: Install langflow in each virtual environment
      command: "{{ venv_base_dir }}/py{{ item }}/bin/pip install langflow"
      loop: "{{ python_versions }}"
      register: langflow_installation
      changed_when: langflow_installation.rc == 0
      # Skip if virtual environment doesn't exist
      when: lookup('stat', venv_base_dir + '/py' + item).stat.exists

    # Create symlinks for easy access to virtual environments
    - name: Create symlinks for easy access
      file:
        src: "{{ venv_base_dir }}/py{{ item }}"
        dest: "{{ project_root }}/.venv-py{{ item }}"
        state: link
      loop: "{{ python_versions }}"
      register: symlink_creation
      changed_when: symlink_creation.changed

    # Final debug task to show setup completion
    - name: Show setup completion status
      debug:
        msg: |
          Virtual environment setup complete!
          
          Available environments:
          {% for version in python_versions %}
          - .venv-py{{ version }}
          {% endfor %}
          
          To activate an environment in WSL:
          source .venv-py{{ python_versions[0] }}/bin/activate
          
          To activate an environment in Windows:
          .venv-py{{ python_versions[0] }}\Scripts\activate
          
          To verify the environment:
          python --version
          which python 